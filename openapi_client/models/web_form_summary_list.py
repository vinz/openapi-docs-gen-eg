# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 

    The version of the OpenAPI document: 1.1.0
    Contact: devcenter@docusign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.web_form_summary import WebFormSummary
from typing import Optional, Set
from typing_extensions import Self

class WebFormSummaryList(BaseModel):
    """
    A list of web form summary items.
    """ # noqa: E501
    items: Optional[List[WebFormSummary]] = Field(default=None, description="Array of web form items with each containing summary.")
    result_set_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Result set size for current page", alias="resultSetSize")
    total_set_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total result set size", alias="totalSetSize")
    start_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Starting position of fields returned for the current page", alias="startPosition")
    end_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ending position of fields returned for the current page", alias="endPosition")
    next_url: Optional[StrictStr] = Field(default=None, description="Url for the next page of results", alias="nextUrl")
    previous_url: Optional[StrictStr] = Field(default=None, description="Url for the previous page of results", alias="previousUrl")
    __properties: ClassVar[List[str]] = ["items", "resultSetSize", "totalSetSize", "startPosition", "endPosition", "nextUrl", "previousUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebFormSummaryList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebFormSummaryList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": [WebFormSummary.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "resultSetSize": obj.get("resultSetSize"),
            "totalSetSize": obj.get("totalSetSize"),
            "startPosition": obj.get("startPosition"),
            "endPosition": obj.get("endPosition"),
            "nextUrl": obj.get("nextUrl"),
            "previousUrl": obj.get("previousUrl")
        })
        return _obj


