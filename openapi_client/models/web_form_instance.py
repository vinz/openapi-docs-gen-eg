# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 

    The version of the OpenAPI document: 1.1.0
    Contact: devcenter@docusign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.instance_status import InstanceStatus
from openapi_client.models.web_form_instance_envelopes_inner import WebFormInstanceEnvelopesInner
from openapi_client.models.web_form_instance_metadata import WebFormInstanceMetadata
from typing import Optional, Set
from typing_extensions import Self

class WebFormInstance(BaseModel):
    """
    An object that contains the Web Form Instance required to render it  and its metadata such as created by, created time
    """ # noqa: E501
    form_url: Optional[StrictStr] = Field(default=None, description="The url used to render the web form instance.", alias="formUrl")
    instance_token: Optional[StrictStr] = Field(default=None, description="Unique token associated with an instance that is required to render the form instance. This token is valid for 5 minutes after which it needs to be refreshed using refreshToken api", alias="instanceToken")
    token_expiration_date_time: Optional[datetime] = Field(default=None, description="The datetime after which the token is expired and form instance is inaccessible.", alias="tokenExpirationDateTime")
    id: StrictStr = Field(description="Unique identifier for a Web Form Instance that is consistent until its expiration")
    form_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for a Web Form that is consistent for it's lifetime", alias="formId")
    account_id: Optional[StrictStr] = Field(default=None, description="Account identifier in which the web form resides", alias="accountId")
    client_user_id: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="A unique identifier for a user that should originate from client's system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc.", alias="clientUserId")
    tags: Optional[List[StrictStr]] = Field(default=None, description="List of tags provided by the user with each request. This field is optional.")
    status: Optional[InstanceStatus] = None
    envelopes: Optional[List[WebFormInstanceEnvelopesInner]] = Field(default=None, description="The associated envelope that is created when the instance is submitted")
    instance_metadata: Optional[WebFormInstanceMetadata] = Field(default=None, alias="instanceMetadata")
    form_values: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Key-value pairs (where key is the component name and value is the form value) used to create a form instance. For key of type TextBox, Email, Date, Select and RadioButtonGroup the value is of string type. For key of type Number, the value is of number type. For key of type of CheckboxGroup, the value is of type array of string.", alias="formValues")
    __properties: ClassVar[List[str]] = ["formUrl", "instanceToken", "tokenExpirationDateTime", "id", "formId", "accountId", "clientUserId", "tags", "status", "envelopes", "instanceMetadata", "formValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebFormInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in envelopes (list)
        _items = []
        if self.envelopes:
            for _item in self.envelopes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['envelopes'] = _items
        # override the default output from pydantic by calling `to_dict()` of instance_metadata
        if self.instance_metadata:
            _dict['instanceMetadata'] = self.instance_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebFormInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "formUrl": obj.get("formUrl"),
            "instanceToken": obj.get("instanceToken"),
            "tokenExpirationDateTime": obj.get("tokenExpirationDateTime"),
            "id": obj.get("id"),
            "formId": obj.get("formId"),
            "accountId": obj.get("accountId"),
            "clientUserId": obj.get("clientUserId"),
            "tags": obj.get("tags"),
            "status": obj.get("status"),
            "envelopes": [WebFormInstanceEnvelopesInner.from_dict(_item) for _item in obj["envelopes"]] if obj.get("envelopes") is not None else None,
            "instanceMetadata": WebFormInstanceMetadata.from_dict(obj["instanceMetadata"]) if obj.get("instanceMetadata") is not None else None,
            "formValues": obj.get("formValues")
        })
        return _obj


