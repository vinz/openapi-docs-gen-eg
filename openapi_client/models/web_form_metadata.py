# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 

    The version of the OpenAPI document: 1.1.0
    Contact: devcenter@docusign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.web_form_component_type import WebFormComponentType
from openapi_client.models.web_form_source import WebFormSource
from openapi_client.models.web_form_user_info import WebFormUserInfo
from typing import Optional, Set
from typing_extensions import Self

class WebFormMetadata(BaseModel):
    """
    Form metadata
    """ # noqa: E501
    source: Optional[WebFormSource] = None
    owner: Optional[WebFormUserInfo] = None
    sender: Optional[WebFormUserInfo] = None
    last_modified_by: Optional[WebFormUserInfo] = Field(default=None, alias="lastModifiedBy")
    form_content_modified_by: Optional[WebFormUserInfo] = Field(default=None, alias="formContentModifiedBy")
    form_properties_modified_by: Optional[WebFormUserInfo] = Field(default=None, alias="formPropertiesModifiedBy")
    last_published_by: Optional[WebFormUserInfo] = Field(default=None, alias="lastPublishedBy")
    last_enabled_by: Optional[WebFormUserInfo] = Field(default=None, alias="lastEnabledBy")
    last_disabled_by: Optional[WebFormUserInfo] = Field(default=None, alias="lastDisabledBy")
    archived_date_time: Optional[datetime] = Field(default=None, description="The last time the web form was archived", alias="archivedDateTime")
    created_date_time: Optional[datetime] = Field(default=None, description="Track the time the web form was created", alias="createdDateTime")
    last_modified_date_time: Optional[datetime] = Field(default=None, description="The last time anything was modified on the form", alias="lastModifiedDateTime")
    form_content_modified_date_time: Optional[datetime] = Field(default=None, description="Track the last time web form content changed.", alias="formContentModifiedDateTime")
    form_properties_modified_date_time: Optional[datetime] = Field(default=None, description="Track the last time the form properties changed.", alias="formPropertiesModifiedDateTime")
    last_published_date_time: Optional[datetime] = Field(default=None, description="Track the last time a draft version was published to active", alias="lastPublishedDateTime")
    last_enabled_date_time: Optional[datetime] = Field(default=None, description="Track the last time the form was enabled", alias="lastEnabledDateTime")
    last_disabled_date_time: Optional[datetime] = Field(default=None, description="Track the last time the form was disabled", alias="lastDisabledDateTime")
    last_sender_consent_date_time: Optional[datetime] = Field(default=None, description="Track the last time a user added their consent for the form.", alias="lastSenderConsentDateTime")
    published_slug: Optional[StrictStr] = Field(default=None, description="The public friendly slug that is used to access the form from the player", alias="publishedSlug")
    published_component_names: Optional[Dict[str, WebFormComponentType]] = Field(default=None, description="A dictionary containing the mapping of component names to their respective component types for all the published components.", alias="publishedComponentNames")
    __properties: ClassVar[List[str]] = ["source", "owner", "sender", "lastModifiedBy", "formContentModifiedBy", "formPropertiesModifiedBy", "lastPublishedBy", "lastEnabledBy", "lastDisabledBy", "archivedDateTime", "createdDateTime", "lastModifiedDateTime", "formContentModifiedDateTime", "formPropertiesModifiedDateTime", "lastPublishedDateTime", "lastEnabledDateTime", "lastDisabledDateTime", "lastSenderConsentDateTime", "publishedSlug", "publishedComponentNames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebFormMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modified_by
        if self.last_modified_by:
            _dict['lastModifiedBy'] = self.last_modified_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form_content_modified_by
        if self.form_content_modified_by:
            _dict['formContentModifiedBy'] = self.form_content_modified_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form_properties_modified_by
        if self.form_properties_modified_by:
            _dict['formPropertiesModifiedBy'] = self.form_properties_modified_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_published_by
        if self.last_published_by:
            _dict['lastPublishedBy'] = self.last_published_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_enabled_by
        if self.last_enabled_by:
            _dict['lastEnabledBy'] = self.last_enabled_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_disabled_by
        if self.last_disabled_by:
            _dict['lastDisabledBy'] = self.last_disabled_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebFormMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": obj.get("source"),
            "owner": WebFormUserInfo.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "sender": WebFormUserInfo.from_dict(obj["sender"]) if obj.get("sender") is not None else None,
            "lastModifiedBy": WebFormUserInfo.from_dict(obj["lastModifiedBy"]) if obj.get("lastModifiedBy") is not None else None,
            "formContentModifiedBy": WebFormUserInfo.from_dict(obj["formContentModifiedBy"]) if obj.get("formContentModifiedBy") is not None else None,
            "formPropertiesModifiedBy": WebFormUserInfo.from_dict(obj["formPropertiesModifiedBy"]) if obj.get("formPropertiesModifiedBy") is not None else None,
            "lastPublishedBy": WebFormUserInfo.from_dict(obj["lastPublishedBy"]) if obj.get("lastPublishedBy") is not None else None,
            "lastEnabledBy": WebFormUserInfo.from_dict(obj["lastEnabledBy"]) if obj.get("lastEnabledBy") is not None else None,
            "lastDisabledBy": WebFormUserInfo.from_dict(obj["lastDisabledBy"]) if obj.get("lastDisabledBy") is not None else None,
            "archivedDateTime": obj.get("archivedDateTime"),
            "createdDateTime": obj.get("createdDateTime"),
            "lastModifiedDateTime": obj.get("lastModifiedDateTime"),
            "formContentModifiedDateTime": obj.get("formContentModifiedDateTime"),
            "formPropertiesModifiedDateTime": obj.get("formPropertiesModifiedDateTime"),
            "lastPublishedDateTime": obj.get("lastPublishedDateTime"),
            "lastEnabledDateTime": obj.get("lastEnabledDateTime"),
            "lastDisabledDateTime": obj.get("lastDisabledDateTime"),
            "lastSenderConsentDateTime": obj.get("lastSenderConsentDateTime"),
            "publishedSlug": obj.get("publishedSlug"),
            "publishedComponentNames": dict((_k, _v) for _k, _v in obj.get("publishedComponentNames").items())
        })
        return _obj


