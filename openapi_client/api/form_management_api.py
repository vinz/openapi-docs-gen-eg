# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 

    The version of the OpenAPI document: 1.1.0
    Contact: devcenter@docusign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.web_form import WebForm
from openapi_client.models.web_form_summary_list import WebFormSummaryList

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class FormManagementApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_form(
        self,
        account_id: Annotated[StrictStr, Field(description="Account identifier in which the web form resides")],
        form_id: Annotated[StrictStr, Field(description="Unique identifier for a web form that is consistent for it's lifetime")],
        state: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="The state of the web form configuration")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WebForm:
        """Get Form

        Retrieves form information filter by form id and state. The `state` parameter is optional and can accept value from `draft, active`.

        :param account_id: Account identifier in which the web form resides (required)
        :type account_id: str
        :param form_id: Unique identifier for a web form that is consistent for it's lifetime (required)
        :type form_id: str
        :param state: The state of the web form configuration
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_form_serialize(
            account_id=account_id,
            form_id=form_id,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebForm",
            '401': "HttpError",
            '404': "HttpError",
            '500': "HttpError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_form_with_http_info(
        self,
        account_id: Annotated[StrictStr, Field(description="Account identifier in which the web form resides")],
        form_id: Annotated[StrictStr, Field(description="Unique identifier for a web form that is consistent for it's lifetime")],
        state: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="The state of the web form configuration")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WebForm]:
        """Get Form

        Retrieves form information filter by form id and state. The `state` parameter is optional and can accept value from `draft, active`.

        :param account_id: Account identifier in which the web form resides (required)
        :type account_id: str
        :param form_id: Unique identifier for a web form that is consistent for it's lifetime (required)
        :type form_id: str
        :param state: The state of the web form configuration
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_form_serialize(
            account_id=account_id,
            form_id=form_id,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebForm",
            '401': "HttpError",
            '404': "HttpError",
            '500': "HttpError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_form_without_preload_content(
        self,
        account_id: Annotated[StrictStr, Field(description="Account identifier in which the web form resides")],
        form_id: Annotated[StrictStr, Field(description="Unique identifier for a web form that is consistent for it's lifetime")],
        state: Annotated[Optional[Annotated[str, Field(strict=True, max_length=15)]], Field(description="The state of the web form configuration")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Form

        Retrieves form information filter by form id and state. The `state` parameter is optional and can accept value from `draft, active`.

        :param account_id: Account identifier in which the web form resides (required)
        :type account_id: str
        :param form_id: Unique identifier for a web form that is consistent for it's lifetime (required)
        :type form_id: str
        :param state: The state of the web form configuration
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_form_serialize(
            account_id=account_id,
            form_id=form_id,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebForm",
            '401': "HttpError",
            '404': "HttpError",
            '500': "HttpError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_form_serialize(
        self,
        account_id,
        form_id,
        state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if account_id is not None:
            _path_params['accountId'] = account_id
        if form_id is not None:
            _path_params['formId'] = form_id
        # process the query parameters
        if state is not None:
            
            _query_params.append(('state', state))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'docusignAccessCode'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/accounts/{accountId}/forms/{formId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_forms(
        self,
        account_id: Annotated[StrictStr, Field(description="Account identifier in which the webform resides")],
        user_filter: Annotated[Optional[StrictStr], Field(description="Filter which forms are returned")] = None,
        is_standalone: Annotated[Optional[StrictBool], Field(description="Is the form a standalone form")] = None,
        is_published: Annotated[Optional[StrictBool], Field(description="Has the form been published")] = None,
        sort_by: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search through form names")] = None,
        start_position: Annotated[Optional[StrictStr], Field(description="Starting position for desired page of results.")] = None,
        count: Annotated[Optional[StrictStr], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WebFormSummaryList:
        """List Forms

        List all the forms for the active user that can be in an active or draft state

        :param account_id: Account identifier in which the webform resides (required)
        :type account_id: str
        :param user_filter: Filter which forms are returned
        :type user_filter: str
        :param is_standalone: Is the form a standalone form
        :type is_standalone: bool
        :param is_published: Has the form been published
        :type is_published: bool
        :param sort_by: Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned.
        :type sort_by: str
        :param search: Search through form names
        :type search: str
        :param start_position: Starting position for desired page of results.
        :type start_position: str
        :param count: Number of results to return per page.
        :type count: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_forms_serialize(
            account_id=account_id,
            user_filter=user_filter,
            is_standalone=is_standalone,
            is_published=is_published,
            sort_by=sort_by,
            search=search,
            start_position=start_position,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebFormSummaryList",
            '401': "HttpError",
            '403': "HttpError",
            '404': "HttpError",
            '500': "HttpError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_forms_with_http_info(
        self,
        account_id: Annotated[StrictStr, Field(description="Account identifier in which the webform resides")],
        user_filter: Annotated[Optional[StrictStr], Field(description="Filter which forms are returned")] = None,
        is_standalone: Annotated[Optional[StrictBool], Field(description="Is the form a standalone form")] = None,
        is_published: Annotated[Optional[StrictBool], Field(description="Has the form been published")] = None,
        sort_by: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search through form names")] = None,
        start_position: Annotated[Optional[StrictStr], Field(description="Starting position for desired page of results.")] = None,
        count: Annotated[Optional[StrictStr], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WebFormSummaryList]:
        """List Forms

        List all the forms for the active user that can be in an active or draft state

        :param account_id: Account identifier in which the webform resides (required)
        :type account_id: str
        :param user_filter: Filter which forms are returned
        :type user_filter: str
        :param is_standalone: Is the form a standalone form
        :type is_standalone: bool
        :param is_published: Has the form been published
        :type is_published: bool
        :param sort_by: Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned.
        :type sort_by: str
        :param search: Search through form names
        :type search: str
        :param start_position: Starting position for desired page of results.
        :type start_position: str
        :param count: Number of results to return per page.
        :type count: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_forms_serialize(
            account_id=account_id,
            user_filter=user_filter,
            is_standalone=is_standalone,
            is_published=is_published,
            sort_by=sort_by,
            search=search,
            start_position=start_position,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebFormSummaryList",
            '401': "HttpError",
            '403': "HttpError",
            '404': "HttpError",
            '500': "HttpError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_forms_without_preload_content(
        self,
        account_id: Annotated[StrictStr, Field(description="Account identifier in which the webform resides")],
        user_filter: Annotated[Optional[StrictStr], Field(description="Filter which forms are returned")] = None,
        is_standalone: Annotated[Optional[StrictBool], Field(description="Is the form a standalone form")] = None,
        is_published: Annotated[Optional[StrictBool], Field(description="Has the form been published")] = None,
        sort_by: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Search through form names")] = None,
        start_position: Annotated[Optional[StrictStr], Field(description="Starting position for desired page of results.")] = None,
        count: Annotated[Optional[StrictStr], Field(description="Number of results to return per page.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Forms

        List all the forms for the active user that can be in an active or draft state

        :param account_id: Account identifier in which the webform resides (required)
        :type account_id: str
        :param user_filter: Filter which forms are returned
        :type user_filter: str
        :param is_standalone: Is the form a standalone form
        :type is_standalone: bool
        :param is_published: Has the form been published
        :type is_published: bool
        :param sort_by: Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned.
        :type sort_by: str
        :param search: Search through form names
        :type search: str
        :param start_position: Starting position for desired page of results.
        :type start_position: str
        :param count: Number of results to return per page.
        :type count: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_forms_serialize(
            account_id=account_id,
            user_filter=user_filter,
            is_standalone=is_standalone,
            is_published=is_published,
            sort_by=sort_by,
            search=search,
            start_position=start_position,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WebFormSummaryList",
            '401': "HttpError",
            '403': "HttpError",
            '404': "HttpError",
            '500': "HttpError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_forms_serialize(
        self,
        account_id,
        user_filter,
        is_standalone,
        is_published,
        sort_by,
        search,
        start_position,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if account_id is not None:
            _path_params['accountId'] = account_id
        # process the query parameters
        if user_filter is not None:
            
            _query_params.append(('user_filter', user_filter))
            
        if is_standalone is not None:
            
            _query_params.append(('is_standalone', is_standalone))
            
        if is_published is not None:
            
            _query_params.append(('is_published', is_published))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if start_position is not None:
            
            _query_params.append(('start_position', start_position))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'docusignAccessCode'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/accounts/{accountId}/forms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


